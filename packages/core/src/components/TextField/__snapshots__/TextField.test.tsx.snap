// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextField character count should correctly render character count for S size TextField if we pass withCharacterCount and maxlength 1`] = `
.c7 {
  font-size: 1rem;
  line-height: 1rem;
  position: absolute;
  top: 0;
  right: 0;
  color: #98A7B7;
  align-self: flex-start;
  z-index: 1;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  margin-top: 1.5rem;
  margin-left: 1.2rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.4rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.2rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 4rem;
  padding: 0 1.2rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.4rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.2rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  opacity: 0;
}

.c3:not(:placeholder-shown)~.c6,
.c3:focus~.c6 {
  position: relative;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="S"
          maxlength="20"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
        <div
          charactercount="0"
          class="c6 c7"
          maxlength="20"
          variant="filled"
        >
          0/20
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField character count should correctly render character count for fusion TextField variant if we pass withCharacterCount and maxlength 1`] = `
.c7 {
  font-size: 1rem;
  line-height: 1rem;
  position: absolute;
  top: 0;
  right: 0;
  color: #607890;
  align-self: flex-start;
  z-index: 1;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  margin-top: 1.2rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.c6,
.c3:focus~.c6 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          maxlength="20"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        />
        <div
          charactercount="0"
          class="c6 c7"
          maxlength="20"
          variant="fusion"
        >
          0/20
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField character count should correctly render character count for multiline TextField if we pass withCharacterCount and maxlength 1`] = `
.c6 {
  font-size: 1rem;
  line-height: 1rem;
  position: absolute;
  top: 0;
  right: 0;
  color: #98A7B7;
  align-self: flex-start;
  z-index: 1;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  margin-top: .1rem;
}

.c5 {
  top: 1.1rem;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.800000000000001rem;
  padding: 1.1rem 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: flex-start;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 1.6rem 0 0 0;
  padding: 0;
  height: 90%;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-50%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <textarea
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          maxlength="20"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
        <div
          charactercount="0"
          class="c6"
          maxlength="20"
          variant="filled"
        >
          0/20
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField character count should correctly render character count if we pass withCharacterCount and maxlength 1`] = `
.c6 {
  font-size: 1rem;
  line-height: 1rem;
  position: absolute;
  top: 0;
  right: 0;
  color: #98A7B7;
  align-self: flex-start;
  z-index: 1;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  margin-top: 1.2rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          maxlength="20"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
        <div
          charactercount="0"
          class="c6"
          maxlength="20"
          variant="filled"
        >
          0/20
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField character count should correctly render character count when the count value is 80% of the maxLength 1`] = `
.c6 {
  font-size: 1rem;
  line-height: 1rem;
  position: absolute;
  top: 0;
  right: 0;
  color: #FD7284;
  align-self: flex-start;
  z-index: 1;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  margin-top: 1.2rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          maxlength="10"
          placeholder=" "
          type="text"
          value="12345678"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
        <div
          charactercount="8"
          class="c6"
          maxlength="10"
          variant="filled"
        >
          8/10
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField character count should correctly render character count when the count value is 100% of the maxLength 1`] = `
.c6 {
  font-size: 1rem;
  line-height: 1rem;
  position: absolute;
  top: 0;
  right: 0;
  color: #D73A43;
  align-self: flex-start;
  z-index: 1;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  margin-top: 1.2rem;
  animation: 0.2s wiggle ease-in-out;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          maxlength="10"
          placeholder=" "
          type="text"
          value="1234567890"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
        <div
          charactercount="10"
          class="c6"
          maxlength="10"
          variant="filled"
        >
          10/10
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField should not call onClick function on click on helper text 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' *';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div>
    <div
      class="c0"
      id="medly-textField-input-wrapper"
      minwidth="20rem"
    >
      <div
        class="c1"
        minrows="1"
        variant="filled"
      >
        <div
          class="c2"
          variant="filled"
        >
          <input
            aria-describedby="medly-textField-helper-text"
            class="c3"
            errortext=""
            id="medly-textField-input"
            inputsize="M"
            placeholder=" "
            required=""
            type="email"
            variant="filled"
          />
          <label
            class="c4 c5"
            for="medly-textField-input"
            inputwidth="0"
            required=""
            variant="filled"
          >
            Name
          </label>
        </div>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField should render asterisk if we pass required prop as true 1`] = `
.c1 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 ::after {
  content: ' *';
}

.c2 .c0 {
  color: #546A7F;
}

.c2:focus-within .c0,
.c2:focus-within:hover .c0 {
  color: #3872D2;
}

.c3:disabled~.c0,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3:not(:placeholder-shown)~.c0,
.c3:focus~.c0 {
  transform: translateY(-87%) scale(0.75);
}

<label
  class="c0 c1"
  for="medly-textField-input"
  inputwidth="0"
  required=""
  variant="filled"
>
  Name
</label>
`;

exports[`TextField should render properly with M size 1`] = `
.c2 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c2 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c11 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c3 {
  pointer-events: none;
}

.c3 * {
  fill: #546A7F;
}

.c3:hover * {
  fill: #546A7F;
}

.c4 {
  margin-right: 1.6rem;
}

.c9 {
  margin-left: 1.6rem;
}

.c8 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c7 {
  color: #546A7F;
}

.c1~.c10 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c7,
.c1:focus-within:hover .c7 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c5 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c6 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c6,
.c6~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c6.c6.c6:focus {
  outline: none;
  box-shadow: unset;
}

.c6.c6.c6:focus::placeholder {
  opacity: 1;
}

.c6:disabled {
  color: #435465;
}

.c6:disabled~.c7,
.c6:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c6 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c6:not(:placeholder-shown)~.c7,
.c6:focus~.c7 {
  transform: translateY(-87%) scale(0.75);
}

.c6:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <svg
        class="c2 c3 c4"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
      <div
        class="c5"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c6"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c7 c8"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
      <svg
        class="c2 c3 c9"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
    <span
      class="c10 c11"
      id="medly-textField-helper-text"
      variant="filled"
    >
      helper text
    </span>
  </div>
</div>
`;

exports[`TextField should render properly with S size 1`] = `
.c2 {
  overflow: visible;
  font-size: 2rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c2 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c11 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.2rem 0;
  white-space: initial;
  user-select: none;
}

.c3 {
  pointer-events: none;
}

.c3 * {
  fill: #546A7F;
}

.c3:hover * {
  fill: #546A7F;
}

.c4 {
  margin-right: 1.2rem;
}

.c9 {
  margin-left: 1.2rem;
}

.c8 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.4rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.2rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 4rem;
  padding: 0 1.2rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c7 {
  color: #546A7F;
}

.c1~.c10 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c7,
.c1:focus-within:hover .c7 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c5 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c6 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c6,
.c6~.sc-1r5xr2a-0 {
  font-size: 1.4rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.2rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c6.c6.c6:focus {
  outline: none;
  box-shadow: unset;
}

.c6.c6.c6:focus::placeholder {
  opacity: 1;
}

.c6:disabled {
  color: #435465;
}

.c6:disabled~.c7,
.c6:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c6 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c6:not(:placeholder-shown)~.c7,
.c6:focus~.c7 {
  opacity: 0;
}

.c6:not(:placeholder-shown)~.sc-1i29ttz-0,
.c6:focus~.sc-1i29ttz-0 {
  position: relative;
}

.c6:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <svg
        class="c2 c3 c4"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
      <div
        class="c5"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c6"
          errortext=""
          id="medly-textField-input"
          inputsize="S"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c7 c8"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
      <svg
        class="c2 c3 c9"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
    <span
      class="c10 c11"
      id="medly-textField-helper-text"
      variant="filled"
    >
      helper text
    </span>
  </div>
</div>
`;

exports[`TextField should render properly with default props 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant and with label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant and with label should render disabled state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  cursor: not-allowed;
  background-color: #F7F8F9;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant and with label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant and without label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant and without label should render disabled state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  cursor: not-allowed;
  background-color: #F7F8F9;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant and without label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant should render error state properly 1`] = `
.c7 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.c6 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1,
.c1:hover,
.c1:focus-within,
.c1:focus-within:hover {
  background-color: #FBEBEC;
}

.c1::after,
.c1:hover::after,
.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #D73A43;
}

.c1 .c4,
.c1:hover .c4,
.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #D73A43;
}

.c1~.c6,
.c1:hover~.c6,
.c1:focus-within~.c6,
.c1:focus-within:hover~.c6 {
  color: #D73A43;
}

.c1 input,
.c1:hover input,
.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #FBEBEC inset;
  caret-color: #D73A43;
}

.c1 input::placeholder,
.c1:hover input::placeholder,
.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(204, 0, 0, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext="Something wen wrong"
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
    <span
      class="c6 c7"
      id="medly-textField-helper-text"
      variant="filled"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with filled variant should render error state properly with a value 1`] = `
.c7 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.c6 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1,
.c1:hover,
.c1:focus-within,
.c1:focus-within:hover {
  background-color: #FBEBEC;
}

.c1::after,
.c1:hover::after,
.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #D73A43;
}

.c1 .c4,
.c1:hover .c4,
.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #D73A43;
}

.c1~.c6,
.c1:hover~.c6,
.c1:focus-within~.c6,
.c1:focus-within:hover~.c6 {
  color: #D73A43;
}

.c1 input,
.c1:hover input,
.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #FBEBEC inset;
  caret-color: #D73A43;
}

.c1 input::placeholder,
.c1:hover input::placeholder,
.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(204, 0, 0, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext="Something wen wrong"
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          value="Example value"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
    <span
      class="c6 c7"
      id="medly-textField-helper-text"
      variant="filled"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with filled variant should render error text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c2~.c0 {
  color: #546A7F;
}

.c2~.c0,
.c2:hover~.c0,
.c2:focus-within~.c0,
.c2:focus-within:hover~.c0 {
  color: #D73A43;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
  variant="filled"
>
  Some text
</span>
`;

exports[`TextField with filled variant should render helper text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c2~.c0 {
  color: #546A7F;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
  variant="filled"
>
  Some text
</span>
`;

exports[`TextField with filled variant should render properly with custom border styles (themed) 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #546A7F;
}

.c7 * {
  fill: #b0bcc8;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  cursor: not-allowed;
  background-color: #F7F8F9;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant should render properly with custom disabled cursor (themed) 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #546A7F;
}

.c7 * {
  fill: #b0bcc8;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
  cursor: text;
  background-color: #F7F8F9;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: text;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant should render properly with multiline 1`] = `
.c5 {
  top: 1.1rem;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.800000000000001rem;
  padding: 1.1rem 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: flex-start;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 1.6rem 0 0 0;
  padding: 0;
  height: 90%;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-50%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <textarea
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant should render properly with prefix 1`] = `
.c2 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c2 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c3 {
  pointer-events: none;
}

.c3 * {
  fill: #546A7F;
}

.c3:hover * {
  fill: #546A7F;
}

.c4 {
  margin-right: 1.6rem;
}

.c8 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c7 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c7,
.c1:focus-within:hover .c7 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c5 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c6 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c6,
.c6~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c6.c6.c6:focus {
  outline: none;
  box-shadow: unset;
}

.c6.c6.c6:focus::placeholder {
  opacity: 1;
}

.c6:disabled {
  color: #435465;
}

.c6:disabled~.c7,
.c6:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c6 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c6:not(:placeholder-shown)~.c7,
.c6:focus~.c7 {
  transform: translateY(-87%) scale(0.75);
}

.c6:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <svg
        class="c2 c3 c4"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
      <div
        class="c5"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c6"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c7 c8"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with filled variant should render properly with suffix 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #546A7F;
}

.c7:hover * {
  fill: #546A7F;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant and with label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant and with label should render disabled state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  cursor: not-allowed;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant and with label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant and without label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant and without label should render disabled state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  cursor: not-allowed;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant and without label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant should render error state properly 1`] = `
.c7 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.4rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.c6 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1,
.c1:hover {
  color: #D73A43;
  background-color: #FCF2F2;
}

.c1 .c4,
.c1:hover .c4 {
  color: #D73A43;
}

.c1~.c6,
.c1:hover~.c6 {
  color: #D73A43;
}

.c1 input,
.c1:hover input {
  caret-color: #13181D;
  box-shadow: 0 0 0 100000px #FCF2F2 inset;
}

.c1 input::placeholder,
.c1:hover input::placeholder {
  color: #C7D0D8;
}

.c1:hover::after {
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
  color: #13181D;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1.c1::after {
  border-color: #D73A43;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext="Something wen wrong"
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
    <span
      class="c6 c7"
      id="medly-textField-helper-text"
      variant="fusion"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with fusion variant should render error state properly with a value 1`] = `
.c7 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.4rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #ffffff;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.c6 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1,
.c1:hover {
  color: #D73A43;
  background-color: #FCF2F2;
}

.c1 .c4,
.c1:hover .c4 {
  color: #D73A43;
}

.c1~.c6,
.c1:hover~.c6 {
  color: #D73A43;
}

.c1 input,
.c1:hover input {
  caret-color: #13181D;
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 input::placeholder,
.c1:hover input::placeholder {
  color: #C7D0D8;
}

.c1:hover::after {
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
  color: #13181D;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1.c1 {
  background-color: #ffffff;
  color: #13181D;
}

.c1.c1::after {
  border-color: #D73A43;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext="Something wen wrong"
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          value="Example value"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
    <span
      class="c6 c7"
      id="medly-textField-helper-text"
      variant="fusion"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with fusion variant should render error text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.4rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c2~.c0 {
  color: #546A7F;
}

.c2~.c0,
.c2:hover~.c0 {
  color: #D73A43;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
  variant="fusion"
>
  Some text
</span>
`;

exports[`TextField with fusion variant should render helper text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.4rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c2~.c0 {
  color: #546A7F;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
  variant="fusion"
>
  Some text
</span>
`;

exports[`TextField with fusion variant should render properly with custom border styles (themed) 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #b0bcc8;
}

.c7 * {
  fill: #b0bcc8;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.25rem;
  border-width: 0.2rem;
  cursor: not-allowed;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.25rem;
  border-width: 0.2rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.25rem;
  border-width: 0.2rem;
}

.c1:focus-within {
  border-radius: 0.25rem;
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant should render properly with custom disabled cursor (themed) 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #b0bcc8;
}

.c7 * {
  fill: #b0bcc8;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  cursor: text;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: text;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant should render properly with multiline 1`] = `
.c5 {
  top: 1.1rem;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 4.800000000000001rem;
  padding: 1.1rem 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: flex-start;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  height: 100%;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-120%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <textarea
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant should render properly with prefix 1`] = `
.c2 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c2 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c3 {
  pointer-events: none;
}

.c3 * {
  fill: #b0bcc8;
}

.c3:hover * {
  fill: #607890;
}

.c4 {
  margin-right: 1.6rem;
}

.c8 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c8 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c7 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c7,
.c1:focus-within:hover .c7 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c5 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c6 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c6,
.c6~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c6.c6.c6:focus {
  outline: none;
  box-shadow: unset;
}

.c6.c6.c6:focus::placeholder {
  opacity: 1;
}

.c6:disabled {
  color: #546A7F;
}

.c6:disabled~.c7,
.c6:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c6 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c6:not(:placeholder-shown)~.c7,
.c6:focus~.c7 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c6:not(:placeholder-shown)~.sc-1i29ttz-0,
.c6:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c6:focus~.c7 {
  font-weight: 600;
}

.c6:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <svg
        class="c2 c3 c4"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
      <div
        class="c5"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c6"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c7 c8"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with fusion variant should render properly with suffix 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #b0bcc8;
}

.c7:hover * {
  fill: #607890;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c5 ::after {
  content: ' (optional)';
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  background-color: #F7F8F9;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.15rem;
  border: 0.1rem solid #b0bcc8;
}

.c1:hover::after {
  border-width: 0.15rem;
  border-color: #607890;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within {
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #F7F8F9 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 1.3rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #546A7F;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateX(-0.4rem) translateY(-140%) scale(0.67);
}

.c3:not(:placeholder-shown)~.sc-1i29ttz-0,
.c3:focus~.sc-1i29ttz-0 {
  background-color: white;
  padding: 0 0.5rem;
  transform: translateY(-167%);
}

.c3:focus~.c4 {
  font-weight: 600;
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="fusion"
    >
      <div
        class="c2"
        variant="fusion"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="fusion"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="fusion"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant and with label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant and with label should render disabled state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
  cursor: not-allowed;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant and with label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant and without label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant and without label should render disabled state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
  cursor: not-allowed;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant and without label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant should render error state properly 1`] = `
.c7 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.c6 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(215,58,67,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1,
.c1:hover,
.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1::after,
.c1:hover::after,
.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #D73A43;
}

.c1 .c4,
.c1:hover .c4,
.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #D73A43;
}

.c1~.c6,
.c1:hover~.c6,
.c1:focus-within~.c6,
.c1:focus-within:hover~.c6 {
  color: #D73A43;
}

.c1 input,
.c1:hover input,
.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
  caret-color: #D73A43;
}

.c1 input::placeholder,
.c1:hover input::placeholder,
.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext="Something wen wrong"
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
    <span
      class="c6 c7"
      id="medly-textField-helper-text"
      variant="outlined"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with outlined variant should render error state properly with a value 1`] = `
.c7 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.c6 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(215,58,67,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1,
.c1:hover,
.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1::after,
.c1:hover::after,
.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #D73A43;
}

.c1 .c4,
.c1:hover .c4,
.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #D73A43;
}

.c1~.c6,
.c1:hover~.c6,
.c1:focus-within~.c6,
.c1:focus-within:hover~.c6 {
  color: #D73A43;
}

.c1 input,
.c1:hover input,
.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
  caret-color: #D73A43;
}

.c1 input::placeholder,
.c1:hover input::placeholder,
.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext="Something wen wrong"
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          value="Example value"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
    <span
      class="c6 c7"
      id="medly-textField-helper-text"
      variant="outlined"
    >
      Something wen wrong
    </span>
  </div>
</div>
`;

exports[`TextField with outlined variant should render error text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c2~.c0 {
  color: #546A7F;
}

.c2~.c0,
.c2:hover~.c0,
.c2:focus-within~.c0,
.c2:focus-within:hover~.c0 {
  color: #D73A43;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
  variant="outlined"
>
  Some text
</span>
`;

exports[`TextField with outlined variant should render helper text properly 1`] = `
.c1 {
  font-size: 1.2rem;
  line-height: 1.6rem;
  margin: 0.5rem 1.6rem 0;
  white-space: initial;
  user-select: none;
}

.c2~.c0 {
  color: #546A7F;
}

<span
  class="c0 c1"
  id="medly-textField-helper-text"
  variant="outlined"
>
  Some text
</span>
`;

exports[`TextField with outlined variant should render properly with custom border styles (themed) 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #607890;
}

.c7 * {
  fill: #b0bcc8;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.25rem;
  background-color: #ffffff;
  cursor: not-allowed;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.25rem;
  border-width: 0.25rem;
  border: 0.1rem solid #98A7B7;
}

.c1:focus-within {
  border-radius: 0.25rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.25rem;
  border-width: 0.2rem;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: not-allowed;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant should render properly with custom disabled cursor (themed) 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #607890;
}

.c7 * {
  fill: #b0bcc8;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
  cursor: text;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1::after,
.c1:hover::after {
  border-width: 0.1rem;
  border-color: #C7D0D8;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1 .c4 {
  color: #b0bcc8;
}

.c1~.sc-avlt8d-0 {
  color: #b0bcc8;
}

.c1 * {
  cursor: text;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      disabled=""
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          disabled=""
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant should render properly with multiline 1`] = `
.c5 {
  top: 1.1rem;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.800000000000001rem;
  padding: 1.1rem 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: flex-start;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 1.6rem 0 0 0;
  padding: 0;
  height: 90%;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-50%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <textarea
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant should render properly with prefix 1`] = `
.c2 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c2 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c3 {
  pointer-events: none;
}

.c3 * {
  fill: #607890;
}

.c3:hover * {
  fill: #607890;
}

.c4 {
  margin-right: 1.6rem;
}

.c8 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c7 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c7,
.c1:focus-within:hover .c7 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c5 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c6 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c6,
.c6~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c6.c6.c6:focus {
  outline: none;
  box-shadow: unset;
}

.c6.c6.c6:focus::placeholder {
  opacity: 1;
}

.c6:disabled {
  color: #435465;
}

.c6:disabled~.c7,
.c6:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c6 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c6:not(:placeholder-shown)~.c7,
.c6:focus~.c7 {
  transform: translateY(-87%) scale(0.75);
}

.c6:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <svg
        class="c2 c3 c4"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
      <div
        class="c5"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c6"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c7 c8"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField with outlined variant should render properly with suffix 1`] = `
.c6 {
  overflow: visible;
  font-size: 2.4rem;
  transition: all 100ms linear;
  cursor: inherit;
}

.c6 * {
  fill-opacity: 1;
  transition: all 100ms linear;
  fill: #607890;
}

.c7 {
  pointer-events: none;
}

.c7 * {
  fill: #607890;
}

.c7:hover * {
  fill: #607890;
}

.c8 {
  margin-left: 1.6rem;
}

.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem;
  background-color: #ffffff;
}

.c1 .c4 {
  color: #607890;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1 input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1::after {
  content: '';
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  background-color: transparent;
  transition: all 100ms ease-out;
  border-radius: 0.4rem;
  border-width: 0.4rem;
  border: 0.1rem solid #98A7B7;
}

.c1:hover {
  box-shadow: 0px 0.2rem 0.8rem rgba(96,120,144,0.2);
}

.c1:focus-within {
  border-radius: 0.4rem;
  box-shadow: 0 0.2rem 0.8rem rgba(56,114,210,0.2);
}

.c1:hover::after {
  border-color: #607890;
  border-width: 0.15rem;
}

.c1:focus-within::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
  border-width: 0.15rem;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #ffffff;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0.4rem;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #ffffff inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: #C7D0D8;
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.6rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="outlined"
    >
      <div
        class="c2"
        variant="outlined"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="outlined"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="outlined"
        >
          Name
        </label>
      </div>
      <svg
        class="c6 c7 c8"
        fill="none"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M8.795 15.875l-3.47-3.47a.996.996 0 0 0-1.41 0 .996.996 0 0 0 0 1.41l4.18 4.18c.39.39 1.02.39 1.41 0l10.58-10.58a.996.996 0 1 0-1.41-1.41l-9.88 9.87z"
          fill="green"
        />
      </svg>
    </div>
  </div>
</div>
`;

exports[`TextField without label should render default state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="email"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        />
      </div>
    </div>
  </div>
</div>
`;

exports[`TextField without label should render focus state properly 1`] = `
.c5 {
  top: 50%;
  left: 0;
  cursor: text;
  user-select: none;
  position: absolute;
  pointer-events: none;
  transition: all 150ms cubic-bezier(0.4,0,0.2,1);
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
  transform-origin: 0 0;
  touch-action: manipulation;
  transform: translateY(-50%);
  opacity: 1;
  z-index: 1;
  width: 100%;
  max-width: min-content;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c1 {
  position: relative;
  display: flex;
  align-items: center;
  flex-direction: row;
  box-sizing: border-box;
  height: 5.6rem;
  padding: 0 1.6rem;
  transition: all 100ms ease-out;
  cursor: text;
  border-radius: 0.4rem 0.4rem 0 0;
  background-color: #eff2f4;
}

.c1 .c4 {
  color: #546A7F;
}

.c1~.sc-avlt8d-0 {
  color: #546A7F;
}

.c1::after {
  content: '';
  width: 100%;
  height: 0;
  position: absolute;
  bottom: 0;
  left: 0;
  box-sizing: border-box;
  border-top: 0.1rem solid #546A7F;
  transition: all 100ms ease-out;
}

.c1:hover::after,
.c1:focus-within::after {
  border-width: 0.2rem;
}

.c1 input {
  box-shadow: 0 0 0 100000px #eff2f4 inset;
}

.c1:focus-within,
.c1:focus-within:hover {
  background-color: #EBF1FA;
}

.c1:focus-within::after,
.c1:focus-within:hover::after {
  border-color: #3872D2;
  border-radius: 0;
}

.c1:focus-within .c4,
.c1:focus-within:hover .c4 {
  color: #3872D2;
}

.c1:focus-within input,
.c1:focus-within:hover input {
  box-shadow: 0 0 0 100000px #EBF1FA inset;
}

.c1:focus-within input::placeholder,
.c1:focus-within:hover input::placeholder {
  color: rgba(0, 90, 238, .2);
}

.c2 {
  display: flex;
  position: relative;
  align-items: center;
  background-color: transparent;
  flex: 1;
  height: 100%;
}

.c0 {
  position: relative;
  flex-direction: column;
  display: inline-flex;
  width: min-content;
  min-width: 20rem;
  margin: 0.8rem 0.8rem 0.8rem 0;
}

.c3 {
  color: #13181D;
  width: 100%;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  transition: all 100ms ease-out;
  background-color: transparent;
  border: none;
  text-overflow: ellipsis;
  resize: none;
  z-index: 1;
  align-self: flex-end;
  margin-bottom: 0.7rem;
}

.c3,
.c3~.sc-1r5xr2a-0 {
  font-size: 1.6rem;
  font-weight: 400;
  letter-spacing: 0rem;
  line-height: 2.6rem;
  font-family: Open Sans,Helvetica Neue,Helvetica,Arial,sans-serif;
}

.c3.c3.c3:focus {
  outline: none;
  box-shadow: unset;
}

.c3.c3.c3:focus::placeholder {
  opacity: 1;
}

.c3:disabled {
  color: #435465;
}

.c3:disabled~.c4,
.c3:disabled~.sc-1r5xr2a-0 {
  cursor: not-allowed;
}

.c3 ::placeholder {
  opacity: 0;
  transition: all 100ms ease-out;
}

.c3:not(:placeholder-shown)~.c4,
.c3:focus~.c4 {
  transform: translateY(-87%) scale(0.75);
}

.c3:not(:placeholder-shown)~.sc-1r5xr2a-0 {
  opacity: 1;
}

<div>
  <div
    class="c0"
    id="medly-textField-input-wrapper"
    minwidth="20rem"
  >
    <div
      class="c1"
      minrows="1"
      variant="filled"
    >
      <div
        class="c2"
        variant="filled"
      >
        <input
          aria-describedby="medly-textField-helper-text"
          class="c3"
          errortext=""
          id="medly-textField-input"
          inputsize="M"
          placeholder=" "
          type="text"
          variant="filled"
        />
        <label
          class="c4 c5"
          for="medly-textField-input"
          inputwidth="0"
          variant="filled"
        >
          Name
        </label>
      </div>
    </div>
  </div>
</div>
`;
